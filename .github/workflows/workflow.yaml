name: solar-system-workflow

on:
  workflow_dispatch:
  push:
    branches:
      - feature-branch1

env:
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  MONGO_URI: "mongodb+srv://supercluster.d83jj.mongodb.net/superData"

jobs:
  unit-testing:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        nodejs_version: [18, 19, 20]
        exclude:
          - os: macos-latest
            nodejs_version: 18
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Set up Node.js version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: SP-Test-Result-${{ matrix.os }}-${{ matrix.nodejs_version }}
          path: test-results.xml

  code-coverage:
    name: Generate code coverage
    needs: unit-testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 18

      - name: Check code coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive coverage results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: code-Coverage-Result
          path: coverage
          retention-days: 5

  docker:
    name: containerization
    needs: [code-coverage, unit-testing]
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: docker login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: GCHR login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repo owner
        id: repo
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
            ghcr.io/${{ steps.repo.outputs.owner }}/solar-system:latest


      - name: Test Docker image
        run: |
          docker images
          docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo "IP Address: $IP"

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live


# Terraform Infra
  terraform:
    name: Terraform Deployment
    needs: docker
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout config files
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./Terraform

      - name: Terraform Apply
        run: terraform apply --auto-approve
        
        working-directory: ./Terraform

      # - name: Terraform Apply
      #   run: |
      #     if [ "${{ github.event.inputs.destroy }}" == "true" ]; then
      #       terraform destroy --auto-approve
      #     else
      #       terraform apply --auto-approve
      #     fi
      #   working-directory: ./Terraform

  deploy:
    name: Deploy to EKS
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout config files
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name solar-system-cluster --region eu-central-1

      - name: Deploy Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml